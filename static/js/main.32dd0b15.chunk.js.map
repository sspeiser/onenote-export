{"version":3,"sources":["PageTree.tsx","GraphService.tsx","Config.ts","AuthProvider.tsx","NavBar.tsx","ErrorMessage.tsx","Welcome.tsx","OneNoteSource.tsx","Notes.tsx","App.tsx","index.tsx"],"names":["TreeNode","label","id","this","undefinedLabel","undefinedId","TreeInternalNode","children","TreePage","contentURL","notebook","sectionGroup","section","wrapAPI","graphRequest","a","Promise","resolve","reject","get","err","res","getPages","accessToken","pagesURL","client","getAuthenticatedClient","api","response","pages","pageIterator","PageIterator","page","push","iterate","value","getPageTree","expand","catch","console","log","pageTree","pagePromises","notebookNode","displayName","sections","sectionNode","pagesUrl","then","title","contentUrl","sectionGroups","sectionGroupNode","all","Client","init","authProvider","done","getUserDetails","select","user","saveResource","src","type","path","paths","writer","split","slice","pop","extension","relResourcePath","getStream","resourceStream","write","name","stream","savePage","pageContent","saveConfig","imgObjPromises","resourcePathPrefix","repeat","map","directory","reduce","x","y","images","getElementsByTagName","image","getAttribute","setAttribute","resources","objectTags","o","hasAttribute","objUrl","pagePath","replace","i","removeAttribute","html","Response","documentElement","outerHTML","body","markdown","mdPath","converter","Converter","makeMarkdown","innerHTML","savePages","streamSaver","WritableStream","ponyfill","Writer","readable","writable","getWriter","fileStream","createWriteStream","pipeTo","close","config","appId","redirectUri","scopes","withAuthProvider","WrappedComponent","props","publicClientApplication","state","error","isAuthenticated","PublicClientApplication","auth","clientId","cache","cacheLocation","storeAuthStateInCookie","accounts","getAllAccounts","length","getUserProfile","login","logout","getAccessToken","setError","message","debug","setErrorMessage","loginPopup","prompt","setState","normalizeError","Error","acquireTokenSilent","account","silentResult","isInteractionRequired","acquireTokenPopup","interactiveResult","email","mail","userPrincipalName","normalizedError","errParts","JSON","stringify","indexOf","React","Component","UserAvatar","avatar","alt","className","style","width","AuthNavItem","UncontrolledDropdown","DropdownToggle","nav","caret","DropdownMenu","right","DropdownItem","divider","onClick","authButtonMethod","NavItem","Button","color","NavBar","toggle","bind","isOpen","notesLink","to","exact","Navbar","dark","fixed","Container","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavLink","target","ErrorMessage","Alert","WelcomeContent","Welcome","Jumbotron","rel","toPolyfillReadable","createReadableStreamWrapper","StreamWriter","result","encoder","r","TextEncoder","str","ready","encode","savePagesEnex","enex","fileStreamWriter","options","EnexDumperOptions","dumper","EnexDumper","noteFromOneNote","next","complete","createNote","document","propsResource","url","filename","mimetype","undefined","height","resource","createResource","loadResource","objects","objectCollection","object","item","data","propsNote","tags","author","content","created","updated","polystream","dataStream","selectedPages","notesLoaded","notesExporting","tree","exportNotes","onChange","currentNode","selectedNodes","searchNode","node","found","selectedNodesTree","getleafs","collection","leaf","finally","css","size","loading","showDropdown","showPartiallySelected","exportNotesEnex","exporting","waiting","render","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.32dd0b15.chunk.js","sourcesContent":["\nexport type PageTree = TreeInternalNode[];\n\nexport class TreeNode {\n    static undefinedId: number = 0;\n    static undefinedLabel: number = 0;\n    label: string;\n    id: any;\n\n    constructor(label: string | undefined | null, id: any) {\n        if (label == null) {\n            this.label = \"undefinedLabel\" + TreeNode.undefinedLabel++;\n        } else {\n            this.label = label;\n        }\n        if (id == null) {\n            this.id = \"undefinedId\" + TreeNode.undefinedId++;\n        } else {\n            this.id = id;\n        }\n    }\n}\n\nexport class TreeInternalNode extends TreeNode {\n    children: TreeNode[] = [];\n}\n\nexport class TreePage extends TreeNode {\n    contentURL: string | undefined | null;\n    notebook: string;\n    sectionGroup: string;\n    section: string;\n\n    constructor(label: string | undefined | null, id: string | undefined | null, contentURL: string | undefined | null, notebook: string, sectionGroup: string, section: string) {\n        super(label, id);\n        this.contentURL = contentURL;\n        this.notebook = notebook;\n        this.sectionGroup = sectionGroup;\n        this.section = section;\n    }\n}\n","import { OnenotePage } from 'microsoft-graph';\nimport { GraphRequest, PageCollection, PageIterator, Client, RetryHandlerOptions, ShouldRetry } from '@microsoft/microsoft-graph-client';\n\nimport { Writer } from '@transcend-io/conflux';\nimport streamSaver from \"streamsaver\";\nimport * as ponyfill from 'web-streams-polyfill/ponyfill';\n\nimport TurndownService from 'turndown';\nimport Converter from 'showdown';\n\nimport { PageTree, TreeInternalNode, TreePage } from './PageTree';\nimport { SaveConfig } from './SaveConfig';\n\n\nasync function wrapAPI(graphRequest: GraphRequest): Promise<any> {\n    return new Promise((resolve, reject) => {\n        graphRequest.get((err, res) => {\n            if (err) {\n                reject(err);\n            }\n            resolve(res);\n        });\n    });\n}\n\nasync function getPages(accessToken: string, pagesURL: string): Promise<OnenotePage[]> {\n    const client = getAuthenticatedClient(accessToken);\n\n    var response: PageCollection = await client\n        .api(pagesURL)\n        .get();\n\n    if (response[\"@odata.nextLink\"]) {\n        // Presence of the nextLink property indicates more results are available\n        // Use a page iterator to get all results\n        var pages: OnenotePage[] = [];\n\n        var pageIterator = new PageIterator(client, response, (page) => {\n            pages.push(page);\n            return true;\n        });\n\n        await pageIterator.iterate();\n\n        return pages;\n    } else {\n\n        return response.value;\n    }\n}\n\nexport async function getPageTree(accessToken: string): Promise<PageTree> {\n    const client = getAuthenticatedClient(accessToken);\n\n    // let response = await client\n    //     .api('/me/onenote/notebooks/')\n    //     .expand('sections,sectionGroups($expand=sections)')\n    //     .get()\n\n\n    let response = await wrapAPI(client\n        .api('/me/onenote/notebooks/')\n        // .middlewareOptions([new RetryHandlerOptions(undefined, undefined, () => false)])\n        .expand('sections,sectionGroups($expand=sections)'))\n        //     .get()\n        .catch(console.log);\n\n    let pageTree: PageTree = [];\n    let pagePromises: Promise<any>[] = [];\n\n    for (const notebook of response.value) {\n        let notebookNode = new TreeInternalNode(notebook.displayName, notebook.id);\n        pageTree.push(notebookNode);\n        for (const section of notebook.sections) {\n            let sectionNode = new TreeInternalNode(section.displayName, section.id);\n            notebookNode.children.push(sectionNode);\n            pagePromises.push(\n                getPages(accessToken, section.pagesUrl).then((pages) => {\n                    for (const page of pages) {\n                        sectionNode.children.push(new TreePage(page.title, page.id, page.contentUrl, notebook.displayName, '.', section.displayName));\n                    }\n                }));\n            // for (const page of await getPages(accessToken, section.pagesUrl)) {\n            //     sectionNode.children.push(new TreePage(page.title, page.id, page.contentUrl, notebook.displayName, '.', section.displayName));\n            // }\n        }\n        for (const sectionGroup of notebook.sectionGroups) {\n            let sectionGroupNode = new TreeInternalNode(sectionGroup.displayName, sectionGroup.id);\n            notebookNode.children.push(sectionGroupNode);\n            for (const section of sectionGroup.sections) {\n                let sectionNode = new TreeInternalNode(section.displayName, section.id);\n                sectionGroupNode.children.push(sectionNode);\n                pagePromises.push(\n                    getPages(accessToken, section.pagesUrl).then((pages) => {\n                        for (const page of pages) {\n                            sectionNode.children.push(new TreePage(page.title, page.id, page.contentUrl, notebook.displayName, sectionGroup.displayName, section.displayName));\n                        }\n                    }));\n                // for (const page of await getPages(accessToken, section.pagesUrl)) {\n                //     sectionNode.children.push(new TreePage(page.title, page.id, page.contentUrl, notebook.displayName, sectionGroup.displayName, section.displayName));\n                // }\n            }\n        }\n    }\n    await Promise.all(pagePromises);\n    return pageTree;\n}\n\n\nexport function getAuthenticatedClient(accessToken: string) {\n    // Initialize Graph client\n    const client = Client.init({\n        // Use the provided access token to authenticate\n        // requests\n        authProvider: (done: any) => {\n            done(null, accessToken);\n        }\n    });\n    return client;\n}\n\nexport async function getUserDetails(accessToken: string) {\n    const client = getAuthenticatedClient(accessToken);\n\n    const user = await client\n        .api('/me')\n        .select('displayName,mail,userPrincipalName')\n        .get();\n\n    return user;\n}\n\nasync function saveResource(accessToken: string, src: string, type: string, path: string, paths: { [key: string]: boolean; }, writer: WritableStreamDefaultWriter): Promise<string> {\n    const client = getAuthenticatedClient(accessToken);\n    const id = src.split(/\\//).slice(0, -1).pop();\n    const extension = type.split(/\\//).pop();\n    const relResourcePath = \"resources/\" + id + '.' + extension;\n\n    if (paths[relResourcePath]) {\n        console.log('Resource already present');\n        return relResourcePath;\n    }\n    paths[relResourcePath] = true;\n\n    let resourceStream = await client.api(src).getStream();\n    if (!resourceStream)\n        return relResourcePath;\n\n    writer.write({\n        name: path + '/' + relResourcePath,\n        stream: () => resourceStream\n    });\n\n    return relResourcePath;\n}\n\nasync function savePage(accessToken: string, page: TreePage, pageContent: any, paths: { [key: string]: boolean }, writer: WritableStreamDefaultWriter, saveConfig: SaveConfig): Promise<any> {\n    let imgObjPromises: Promise<any>[] = [];\n    const path = \"/\" + page.notebook + \"/\" + page.sectionGroup + \"/\" + page.section;\n    const anotherPathElementForMDorHTML = 0;\n    const resourcePathPrefix = '../'.repeat(path.split('/').map((directory) => {\n        if (directory === '.') return 0;\n        if (directory === '') return 0;\n        if (directory === '..') return -1;\n        return 1;\n    }).reduce((x: number, y: number) => x + y, anotherPathElementForMDorHTML));\n\n    if (saveConfig.images) {\n        let images = pageContent.getElementsByTagName('img');\n\n        for (const image of images) {\n            let src = image.getAttribute('data-fullres-src') || image.getAttribute('src');\n            if (!src) continue;\n            let type = image.getAttribute('data-fullres-src-type') || image.getAttribute('data-src-type');\n            // imgObjPromises.push(saveResource(accessToken, src, type, path, paths, writer).then((relResourcePath) => image.setAttribute('src', relResourcePath)));\n            imgObjPromises.push(saveResource(accessToken, src, type, '', paths, writer).then((relResourcePath) => image.setAttribute('src', resourcePathPrefix + relResourcePath)));\n        }\n    }\n\n    if (saveConfig.resources) {\n        let objectTags = pageContent.getElementsByTagName('object');\n        for (const o of objectTags) {\n            if (!o.hasAttribute('data')) continue;\n            if (!o.hasAttribute('type')) continue;\n\n            const objUrl = o.getAttribute('data');\n            // imgObjPromises.push(saveResource(accessToken, objUrl, o.getAttribute('type'), path, paths, writer).then((relResourcePath) => o.setAttribute('data', relResourcePath)));\n            imgObjPromises.push(saveResource(accessToken, objUrl, o.getAttribute('type'), '', paths, writer).then((relResourcePath) => o.setAttribute('data', resourcePathPrefix + relResourcePath)));\n        }\n    }\n\n    let pagePath = path + '/' + page.label.replace(/\\//, ' ') + '.html';\n    let i = 0;\n    while (paths[pagePath]) {\n        pagePath = path + '/' + page.label.replace(/\\//, ' ') + '_' + i + '.html';\n        i++;\n    }\n    paths[pagePath] = true;\n\n    // Important to wait for all images and objects before writing html, otherwise src and data attributes have not been updated\n    await Promise.all(imgObjPromises);\n\n    // if (saveConfig.html) {\n    //     writer.write({\n    //         name: /* '/html'  + */ pagePath,\n    //         stream: () => new Response(pageContent.documentElement.outerHTML).body\n    //     });\n    // }\n\n    // Remove all styles\n    for(const element of pageContent.getElementsByTagName('*')) {\n        element.removeAttribute('style');\n    }\n    if (saveConfig.html) {\n        writer.write({\n            name: /* '/html'  + */ pagePath, //.replace('.html', '_nostyles.html'),\n            stream: () => new Response(pageContent.documentElement.outerHTML).body\n        });\n    }\n\n\n    if (saveConfig.markdown) {\n        try {\n            let mdPath = pagePath.replace(/\\.html$/, '.md');\n            let converter = new Converter.Converter();\n            let markdown = \"\";\n            if (pageContent && pageContent.body) {\n                markdown = converter.makeMarkdown(pageContent.body.innerHTML, pageContent);\n                // var turndownService = new TurndownService();\n                // let markdown = turndownService.turndown(pageContent.documentElement.outerHTML);\n            } else {\n                console.log(pageContent);\n            }\n            if (markdown) {\n                writer.write({\n                    name: /* '/markdown' + */ mdPath,\n                    stream: () => new Response(markdown).body\n                });\n            }\n        } catch (error) {\n            console.log(error);\n            return true;\n        }\n    }\n\n    return true;\n}\n\nexport async function savePages(accessToken: string, pages: TreePage[], saveConfig: SaveConfig) {\n    const client = getAuthenticatedClient(accessToken);\n\n    // Set up streamsaver\n    streamSaver.WritableStream = ponyfill.WritableStream\n\n    let writer: WritableStreamDefaultWriter<any>;\n\n    const { readable, writable } = new Writer();\n    writer = writable.getWriter();\n\n    const fileStream = streamSaver.createWriteStream(\"onenote-export.zip\");\n\n    readable.pipeTo(fileStream);\n\n    let pagePromises: Promise<any>[] = [];\n    let paths: { [key: string]: boolean } = {};\n\n    for (const page of pages) {\n        if (!page.contentURL) continue;\n        pagePromises.push(client.api(page.contentURL).get().then((pageContent: any) =>\n            savePage(accessToken, page, pageContent, paths, writer, saveConfig)).then()\n        );\n    }\n    await Promise.all(pagePromises);\n    writer.close();\n}","export const config = {\n    appId: 'b92f9379-9e28-4076-9ba1-5546b988b1b6',\n    redirectUri: 'https://sspeiser.github.io/onenote-export', // 'http://localhost:3000',\n    scopes: [\n      'user.read',\n      'notes.read',\n    ]\n  };","import { getUserDetails } from './GraphService';\nimport React from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\n\nimport { config } from './Config';\n\nexport interface AuthComponentProps {\n  error: any;\n  isAuthenticated: boolean;\n  user: any;\n  login: Function;\n  logout: Function;\n  getAccessToken: Function;\n  setError: Function;\n}\n\ninterface AuthProviderState {\n  error: any;\n  isAuthenticated: boolean;\n  user: any;\n}\n\nexport default function withAuthProvider<T extends React.Component<AuthComponentProps>>\n  (WrappedComponent: new(props: AuthComponentProps, context?: any) => T): React.ComponentClass {\n  return class extends React.Component<any, AuthProviderState> {\n    private publicClientApplication: PublicClientApplication;\n\n    constructor(props: any) {\n      super(props);\n      this.state = {\n        error: null,\n        isAuthenticated: false,\n        user: {}\n      };\n\n      // Initialize the MSAL application object\n      this.publicClientApplication = new PublicClientApplication({\n        auth: {\n            clientId: config.appId,\n            redirectUri: config.redirectUri\n        },\n        cache: {\n            cacheLocation: \"sessionStorage\",\n            storeAuthStateInCookie: true\n        }\n      });\n    }\n\n    componentDidMount() {\n      // If MSAL already has an account, the user\n      // is already logged in\n      const accounts = this.publicClientApplication.getAllAccounts();\n\n      if (accounts && accounts.length > 0) {\n        // Enhance user object with data from Graph\n        this.getUserProfile();\n      }\n    }\n\n    render() {\n      return <WrappedComponent\n        login = { () => this.login() }\n        logout = { () => this.logout() }\n        getAccessToken = { (scopes: string[]) => this.getAccessToken(scopes)}\n        setError = { (message: string, debug: string) => this.setErrorMessage(message, debug)}\n        {...this.props} \n        {...this.state} />;\n    }\n\n    async login() {\n      try {\n        // Login via popup\n        await this.publicClientApplication.loginPopup(\n            {\n              scopes: config.scopes,\n              prompt: \"select_account\"\n          });\n\n        // After login, get the user's profile\n        await this.getUserProfile();\n      }\n      catch(err) {\n        this.setState({\n          isAuthenticated: false,\n          user: {},\n          error: this.normalizeError(err)\n        });\n      }\n    }\n\n    logout() {\n      this.publicClientApplication.logout();\n    }\n\n    async getAccessToken(scopes: string[]): Promise<string> {\n      try {\n        const accounts = this.publicClientApplication\n          .getAllAccounts();\n\n        if (accounts.length <= 0) throw new Error('login_required');\n        // Get the access token silently\n        // If the cache contains a non-expired token, this function\n        // will just return the cached token. Otherwise, it will\n        // make a request to the Azure OAuth endpoint to get a token\n        var silentResult = await this.publicClientApplication\n            .acquireTokenSilent({\n              scopes: scopes,\n              account: accounts[0]\n            });\n\n        return silentResult.accessToken;\n      } catch (err) {\n        // If a silent request fails, it may be because the user needs\n        // to login or grant consent to one or more of the requested scopes\n        if (this.isInteractionRequired(err)) {\n          var interactiveResult = await this.publicClientApplication\n              .acquireTokenPopup({\n                scopes: scopes\n              });\n\n          return interactiveResult.accessToken;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    async getUserProfile() {\n        try {\n          var accessToken = await this.getAccessToken(config.scopes);\n      \n          if (accessToken) {\n            // Get the user's profile from Graph\n            var user = await getUserDetails(accessToken);\n            this.setState({\n              isAuthenticated: true,\n              user: {\n                displayName: user.displayName,\n                email: user.mail || user.userPrincipalName\n              },\n              error: null\n            });\n          }\n        }\n        catch(err) {\n          this.setState({\n            isAuthenticated: false,\n            user: {},\n            error: this.normalizeError(err)\n          });\n        }\n      }\n\n    setErrorMessage(message: string, debug: string) {\n      this.setState({\n        error: {message: message, debug: debug}\n      });\n    }\n\n    normalizeError(error: string | Error): any {\n      var normalizedError = {};\n      if (typeof(error) === 'string') {\n        var errParts = error.split('|');\n        normalizedError = errParts.length > 1 ?\n          { message: errParts[1], debug: errParts[0] } :\n          { message: error };\n      } else {\n        normalizedError = {\n          message: error.message,\n          debug: JSON.stringify(error)\n        };\n      }\n      return normalizedError;\n    }\n\n    isInteractionRequired(error: Error): boolean {\n      if (!error.message || error.message.length <= 0) {\n        return false;\n      }\n\n      return (\n        error.message.indexOf('consent_required') > -1 ||\n        error.message.indexOf('interaction_required') > -1 ||\n        error.message.indexOf('login_required') > -1 ||\n        error.message.indexOf('no_account_in_silent_request') > -1\n      );\n    }\n  }\n}","import React from 'react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\nimport {\n    Button,\n    Collapse,\n    Container,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from 'reactstrap';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\ninterface NavBarProps {\n    isAuthenticated: boolean;\n    authButtonMethod: any;\n    user: any;\n}\n\ninterface NavBarState {\n    isOpen: boolean;\n}\n\nfunction UserAvatar(props: any) {\n    // If a user avatar is available, return an img tag with the pic\n    if (props.user.avatar) {\n        return <img\n            src={props.user.avatar} alt=\"user\"\n            className=\"rounded-circle align-self-center mr-2\"\n            style={{ width: '32px' }}></img>;\n    }\n\n    // No avatar available, return a default icon\n    return <i\n        className=\"far fa-user-circle fa-lg rounded-circle align-self-center mr-2\"\n        style={{ width: '32px' }}></i>;\n}\n\nfunction AuthNavItem(props: NavBarProps) {\n    // If authenticated, return a dropdown with the user's info and a\n    // sign out button\n    if (props.isAuthenticated) {\n        return (\n            <UncontrolledDropdown>\n                <DropdownToggle nav caret>\n                    <UserAvatar user={props.user} />\n                </DropdownToggle>\n                <DropdownMenu right>\n                    <h5 className=\"dropdown-item-text mb-0\">{props.user.displayName}</h5>\n                    <p className=\"dropdown-item-text text-muted mb-0\">{props.user.email}</p>\n                    <DropdownItem divider />\n                    <DropdownItem onClick={props.authButtonMethod}>Sign Out</DropdownItem>\n                </DropdownMenu>\n            </UncontrolledDropdown>\n        );\n    }\n\n    // Not authenticated, return a sign in link\n    return (\n        <NavItem>\n            <Button\n                onClick={props.authButtonMethod}\n                className=\"btn-link nav-link border-0\"\n                color=\"link\">Sign In</Button>\n        </NavItem>\n    );\n}\n\nexport default class NavBar extends React.Component<NavBarProps, NavBarState> {\n    constructor(props: NavBarProps) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        // Only show notes nav item if logged in\n        let notesLink = null;\n        if (this.props.isAuthenticated) {\n            notesLink = (\n                <NavItem>\n                    <RouterNavLink to=\"./notes\" className=\"nav-link\" exact>Notes</RouterNavLink>\n                </NavItem>\n            );\n        }\n\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n                    <Container>\n                        <NavbarBrand href=\"./\">OneNote Export</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"mr-auto\" navbar>\n                                <NavItem>\n                                    <RouterNavLink to=\"./\" className=\"nav-link\" exact>Home</RouterNavLink>\n                                </NavItem>\n                                {notesLink}\n                            </Nav>\n                            <Nav className=\"justify-content-end\" navbar>\n                                <NavItem>\n                                    {/* <RouterNavLink to=\"./\" className=\"nav-link\" exact>Donate</RouterNavLink> */}\n                                    <NavLink href=\"https://paypal.me/mkaythx\" target=\"_blank\">\n                                        <i className=\"fas fa-external-link-alt mr-1\"></i>\n                    Donate\n                  </NavLink>\n\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href=\"https://github.com/sspeiser/onenote-export\" target=\"_blank\">\n                                        <i className=\"fas fa-external-link-alt mr-1\"></i>\n                    Support and Source Code\n                  </NavLink>\n                                </NavItem>\n                                <AuthNavItem\n                                    isAuthenticated={this.props.isAuthenticated}\n                                    authButtonMethod={this.props.authButtonMethod}\n                                    user={this.props.user} />\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div >\n        );\n    }\n}","import React from 'react';\nimport { Alert } from 'reactstrap';\n\ninterface ErrorMessageProps {\n  debug: string;\n  message: string;\n}\n\nexport default class ErrorMessage extends React.Component<ErrorMessageProps> {\n  render() {\n    let debug = null;\n    if (this.props.debug) {\n      debug = <pre className=\"alert-pre border bg-light p-2\"><code>{this.props.debug}</code></pre>;\n    }\n    return (\n      <Alert color=\"danger\">\n        <p className=\"mb-3\">{this.props.message}</p>\n        {debug}\n      </Alert>\n    );\n  }\n}","import React from 'react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\nimport {\n    Button,\n    Jumbotron\n} from 'reactstrap';\n\ninterface WelcomeProps {\n    isAuthenticated: boolean;\n    authButtonMethod: any;\n    user: any;\n}\n\ninterface WelcomeState {\n    isOpen: boolean;\n}\n\nfunction WelcomeContent(props: WelcomeProps) {\n    // If authenticated, greet the user\n    if (props.isAuthenticated) {\n        return (\n            <div>\n                <h4>You are logged in as {props.user.displayName}!</h4>\n                <p>Choose the notes link in the navigation bar at the top of the page to get started with exporting.</p>\n                <RouterNavLink to=\"./notes\" className=\"nav-link\" exact>Or just click here to get started</RouterNavLink>\n\n            </div>\n        );\n    }\n\n    // Not authenticated, present a sign in button\n    return <Button color=\"primary\" onClick={props.authButtonMethod}>Before you can export your notes you have to sign into your Microsoft account</Button>;\n}\n\nexport default class Welcome extends React.Component<WelcomeProps, WelcomeState> {\n    render() {\n        return (\n            <Jumbotron>\n                <h1>OneNote Export</h1>\n                <p className=\"lead\">\n                    This app exports your OneNote notes from Microsoft 365 as a zip file containing your notes in html or markdown format and any embedded images and files.\n          </p>\n                <p>This app is free and respecting your privacy in the following ways</p>\n                <ul>\n                    <li>Free of charge: no payment is required, no matter how much data you want to export</li>\n                    <li>No data collection: no data is collected about you, your login data or your notes - in fact your notes are processed only in your browser and never touch any of our servers. We don't have tracking software in this page.</li>\n                    <li>No advertisments: well ... no advertisments</li>\n                    <li>Open Source: source code is available, please refer to link in navigation bar at the top of the page</li>\n                    <li>No warranty and support: this app only requests read rights and so is not able to change your OneNote data, however there are no warranties and support is provided at GitHub on a best effort base</li>\n                </ul>\n                <p>Your support in the form of donations is very much appreciated</p>\n                <ul>\n                    <li><a href=\"https://paypal.me/mkaythx\" target=\"_blank\" rel=\"noreferrer\">PayPal</a></li>\n                    <li>BitCoin: 19ekwnds6jd9YwWtZ3H5W6iC96jFape5At<br /> <img src=\"bitcoin.png\" width=\"100\" alt=\"\" /></li>\n                </ul>\n                <WelcomeContent\n                    isAuthenticated={this.props.isAuthenticated}\n                    user={this.props.user}\n                    authButtonMethod={this.props.authButtonMethod} />\n            </Jumbotron>\n        );\n    }\n}","import { Writer } from '@transcend-io/conflux';\nimport { Note, Resource, createResource, createNote, EnexDumper, EnexDumperOptions } from 'enex-dumper';\nimport { StringWriter } from 'enex-dumper/dist/src/EnexDumper';\nimport { Stream } from 'stream';\nimport streamSaver from 'streamsaver';\nimport * as ponyfill from 'web-streams-polyfill/ponyfill';\nimport { getAuthenticatedClient } from './GraphService';\nimport { TreePage } from \"./PageTree\";\nimport { SaveConfig } from './SaveConfig';\nimport { createReadableStreamWrapper } from '@mattiasbuelens/web-streams-adapter';\nconst toPolyfillReadable = createReadableStreamWrapper(ponyfill.ReadableStream);\n\n\nclass StreamWriter implements StringWriter {\n    readonly result: Promise<void>;\n    private resolve?: () => void;\n\n    private encoder: TextEncoder;\n\n\n    constructor(private writer: WritableStreamDefaultWriter<any>) {\n        this.result = new Promise<void>((r) => this.resolve = r);\n        this.encoder = new TextEncoder();\n    }\n\n    public write(str: string): Promise<void> {\n        return this.writer.ready.then(() => this.writer.write(this.encoder.encode(str)));\n    }\n\n    public close(): Promise<void> {\n        return new Promise<void>((r) => {\n            this.writer.ready.then(() => {\n                this.writer.close().then(() => {\n                    if (this.resolve) {\n                        this.resolve();\n                    }\n                    r();\n                })\n            })\n        });\n    }\n}\n\nexport async function savePagesEnex(accessToken: string, pages: TreePage[], saveConfig: SaveConfig) {\n    if (!saveConfig.enex) {\n        return;\n    }\n\n    // Set up streamsaver\n    streamSaver.WritableStream = ponyfill.WritableStream\n\n    const fileStream = streamSaver.createWriteStream(\"onenote-export.enex\");\n    let fileStreamWriter: WritableStreamDefaultWriter<any> = fileStream.getWriter();\n    let writer = new StreamWriter(fileStreamWriter);\n\n    const options = new EnexDumperOptions();\n    const dumper = new EnexDumper(writer, options);\n\n    let pagePromises: Promise<any>[] = [];\n\n    for (const page of pages) {\n        pagePromises.push(noteFromOneNote(accessToken, page, saveConfig).then(dumper.next.bind(dumper)));\n    }\n    await Promise.all(pagePromises);\n    dumper.complete();\n    await dumper.done;\n    await writer.result;\n}\n\n\nasync function noteFromOneNote(accessToken: string, page: TreePage, saveConfig: SaveConfig): Promise<Note> {\n    const client = getAuthenticatedClient(accessToken);\n    if (!page.contentURL) return createNote({ title: page.label });\n    const document = await client.api(page.contentURL).get();\n\n    const resources: Resource[] = [];\n\n    const images: HTMLImageElement[] = [];\n    for (const image of document.getElementsByTagName('img')) {\n        images.push(image);\n    }\n    for (const image of images) {\n        let src = image.getAttribute('data-fullres-src') || image.getAttribute('src');\n        if (!src) continue;\n        let type = image.getAttribute('data-fullres-src-type') || image.getAttribute('data-src-type') || '';\n\n        const id = src.split(/\\//).slice(0, -1).pop();\n        const extension = type.split(/\\//).pop();\n\n        const propsResource = {\n            url: src,\n            filename: image.src.split('/').pop() + '.' + extension,\n            mimetype: type,\n            width: image.width || undefined,\n            height: image.height || undefined,\n        }\n\n        const resource = createResource(propsResource);\n        await loadResource(accessToken)(resource);\n        resources.push(resource);\n    }\n\n    const objects: HTMLObjectElement[] = [];\n    const objectCollection = document.getElementsByTagName('object');\n    for (let i = 0; i < objectCollection.length; i++) {\n        const object = objectCollection.item(i);\n        if (object)\n            objects.push(object);\n    }\n    for (const object of objects) {\n        if (!object.hasAttribute('data')) continue;\n        if (!object.hasAttribute('type')) continue;\n        const extension = object.type.split(/\\//).pop();\n        const propsResource = {\n            url: object.data,\n            filename: object.data.split('/').pop() + '.' + extension,\n            mimetype: object.type,\n        }\n        // resources.push(createResource(propsResource, loadResource(accessToken)));\n        const resource = createResource(propsResource);\n        await loadResource(accessToken)(resource);\n        resources.push(resource);\n    }\n\n    const propsNote = {\n        title: page.label || 'No title',\n        tags: [(page.notebook + \".\" + (page.sectionGroup === \".\" ? \"\" : page.sectionGroup + \".\") + page.section)],\n        author: null,\n        content: document,\n        resources: resources,\n        created: null,\n        updated: null,\n    }\n    return createNote(propsNote);\n}\nfunction loadResource(accessToken: string) {\n    const client = getAuthenticatedClient(accessToken);\n    return async function (resource: Resource) {\n        if (!resource.url) return new Response(\"\").body;\n        const stream = await client.api(resource.url).getStream();\n        try {\n            const polystream = toPolyfillReadable(stream);\n            if (polystream instanceof ponyfill.ReadableStream) {\n                resource.dataStream = polystream;\n            } else {\n                resource.dataStream = stream;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n","import React from 'react';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport {\n    Button\n} from 'reactstrap';\n\nimport DropdownTreeSelect from \"react-dropdown-tree-select\";\n\nimport { config } from './Config';\nimport { getPageTree, savePages } from './GraphService';\nimport { PageTree, TreePage } from \"./PageTree\";\nimport withAuthProvider, { AuthComponentProps } from './AuthProvider';\nimport { savePagesEnex } from './OneNoteSource';\n\ninterface NotesState {\n    notesLoaded: boolean;\n    notesExporting: boolean;\n    tree: PageTree;\n}\n\nclass Notes extends React.Component<AuthComponentProps, NotesState> {\n    selectedPages: TreePage[] = [];\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            notesLoaded: false,\n            notesExporting: false,\n            tree: []\n        };\n        this.exportNotes = this.exportNotes.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(currentNode: any, selectedNodes: any) {\n\n        let searchNode = function (tree: any[], id: any): any {\n            for (const node of tree) {\n                if (node['id'] === id)\n                    return node;\n                if (node['children']) {\n                    let found = searchNode(node.children, id);\n                    if (found != null) {\n                        return found;\n                    }\n                }\n            }\n        }\n        let selectedNodesTree: any[] = [];\n        for (const node of selectedNodes) {\n            selectedNodesTree.push(searchNode(this.state.tree, node['id']));\n        }\n\n        let getleafs = function (tree: any[], collection: any[]) {\n            for (const node of tree) {\n                if (!node[\"children\"]) {\n                    collection.push(node);\n                } else {\n                    getleafs(node[\"children\"], collection);\n                }\n            }\n        }\n        let selectedPages: any[] = [];\n        getleafs(selectedNodesTree, selectedPages);\n\n        this.selectedPages = selectedPages;\n    }\n\n    async exportNotes() {\n        this.setState({ notesExporting: true });\n        console.log(\"Exporting ...\");\n\n        for (const leaf of this.selectedPages) {\n            console.log(\"... \" + leaf.label + \"  \" + leaf.contentURL);\n        }\n\n        let saveConfig = { markdown: true, html: true, resources: false, images: false, enex: false };\n\n        savePages(this.props.getAccessToken(config.scopes), this.selectedPages, saveConfig)\n            .catch((error) => this.props.setError('ERROR', JSON.stringify(error)))\n            .finally(() => this.setState({ notesExporting: false }));\n    }\n\n    async exportNotesEnex() {\n        this.setState({ notesExporting: true });\n        console.log(\"Exporting ...\");\n\n        for (const leaf of this.selectedPages) {\n            console.log(\"... \" + leaf.label + \"  \" + leaf.contentURL);\n        }\n\n        let saveConfig = { markdown: false, html: true, resources: true, images: true, enex: true };\n        savePagesEnex(this.props.getAccessToken(config.scopes), this.selectedPages, saveConfig)\n            .catch((error) => this.props.setError('ERROR', JSON.stringify(error)))\n            .finally(() => this.setState({ notesExporting: false }));\n    }\n\n\n    async componentDidUpdate() {\n        if (this.state.notesLoaded) {\n            return;\n        }\n        try {\n            // Get the user's access token\n            var accessToken = await this.props.getAccessToken(config.scopes);\n\n            // Get the user's notes\n            let tree = await getPageTree(accessToken);\n\n            // Update the array of notes in state\n            this.setState({\n                notesLoaded: true,\n                tree: tree\n            });\n        }\n        catch (err) {\n            this.props.setError('ERROR', JSON.stringify(err));\n        }\n    }\n\n    waiting() {\n        return <div><p>Loading your notebooks ... this can take a while</p>\n\n            <p>\n                <PacmanLoader css={\"border-color: black; border: 2px;\"}\n                    size={50}\n                    color={\"blue\"}\n                    loading={!this.state.notesLoaded} />\n            </p>\n        </div>;\n    }\n\n    exporting() {\n        return <div><p>Exporting your notebooks ... this can take a while</p>\n\n            <p>\n                <PacmanLoader css={\"border-color: black; border: 2px;\"}\n                    size={50}\n                    color={\"blue\"}\n                    loading={!this.state.notesExporting} />\n            </p>\n        </div>;\n    }\n\n    done() {\n        return <div>\n            <DropdownTreeSelect\n                data={this.state.tree}\n                showDropdown=\"initial\"\n                // texts={{ placeholder: \"Loading your notebooks\" }}\n                showPartiallySelected={true}\n                onChange={this.onChange}\n                className=\"mdl-demo\"\n            />\n            <Button color=\"primary\" onClick={this.exportNotes.bind(this)}>Export your notes as a zip file<br /> containing HTML files and resources</Button> &nbsp; &nbsp; &nbsp;<br /><br />\n            <Button color=\"primary\" onClick={this.exportNotesEnex.bind(this)}>Export your notes as ENEX-File - <br />Evernote export format that can be<br /> imported into many note applications</Button><br />\n            <br />\n            How to proceed from here depends on which tool you want to use in the future:<br />\n            <ul>\n                <li>General purpose editor (e.g. Atom, Visual Studio Code): download zip and open directory in your editor. Maybe convert HTML files to markdown, e.g. using <a href=\"https://pandoc.org/demos.html\" target=\"_blank\" rel=\"noreferrer\">pandoc, see example 12</a></li>\n                <li>Standard Notes: both ENEX and zip should be importable via the provided tools. It will not import resources.</li>\n                <li>Evernote: download ENEX and import in desktop application. Some resources and images might be damaged.</li>\n                <li>Joplin: download ENEX and import as Markdown. Sections will be converted to tags. As an alternative you can download the zip, unzip it and import the HTML directory</li>\n                <li>Anything else: download both and see which one imports better</li>\n            </ul>\n        </div>\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>Select Notebooks, Sections, Pages to export</h4>\n                {this.state.notesLoaded ? (this.state.notesExporting ? this.exporting() : this.done()) : this.waiting()}\n            </div>\n        );\n    }\n}\n\nexport default withAuthProvider(Notes);","import withAuthProvider, { AuthComponentProps } from './AuthProvider';\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Container } from 'reactstrap';\nimport NavBar from './NavBar';\nimport ErrorMessage from './ErrorMessage';\nimport Welcome from './Welcome';\nimport Notes from './Notes';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends Component<AuthComponentProps> {\n    render() {\n        let error = null;\n        if (this.props.error) {\n            error = <ErrorMessage\n                message={this.props.error.message}\n                debug={this.props.error.debug} />;\n        }\n\n        return (\n            <Router>\n                <div>\n                    <NavBar\n                        isAuthenticated={this.props.isAuthenticated}\n                        authButtonMethod={this.props.isAuthenticated ? this.props.logout : this.props.login}\n                        user={this.props.user} />\n                    <Container>\n                        {error}\n                        <Route exact path=\"./\"\n                            render={(props) =>\n                                <Welcome {...props}\n                                    isAuthenticated={this.props.isAuthenticated}\n                                    user={this.props.user}\n                                    authButtonMethod={this.props.login} />\n                            } />\n                        <Route exact path=\"./notes\"\n                            render={(props) =>\n                                this.props.isAuthenticated ?\n                                    <Notes {...props} /> :\n                                    <Redirect to=\"/\" />\n                            } />\n                    </Container>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default withAuthProvider(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}